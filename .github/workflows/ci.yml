name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7
        ports: [ "6379:6379" ]
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: labo02_db
          MYSQL_USER: labo02
          MYSQL_PASSWORD: labo02
        ports: [ "3306:3306" ]

    steps:
      - uses: actions/checkout@v4
        with:
          clean: true

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest SQLAlchemy redis mysql-connector-python python-dotenv

      - name: Wait for services (quick)
        run: |
          sudo apt-get update && sudo apt-get install -y netcat-openbsd mysql-client
          for i in {1..60}; do nc -z 127.0.0.1 6379 && break; sleep 1; done
          for i in {1..60}; do nc -z 127.0.0.1 3306 && break; sleep 1; done
          echo "Services up."

      - name: Seed DB (with sku column)
        run: |
          mysql -h 127.0.0.1 -uroot -proot <<'SQL'
          CREATE DATABASE IF NOT EXISTS labo02_db CHARACTER SET utf8mb4;
          CREATE USER IF NOT EXISTS 'labo02'@'%' IDENTIFIED BY 'labo02';
          GRANT ALL PRIVILEGES ON labo02_db.* TO 'labo02'@'%';
          FLUSH PRIVILEGES;
          USE labo02_db;

          CREATE TABLE IF NOT EXISTS users (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(100),
            email VARCHAR(150)
          );

          CREATE TABLE IF NOT EXISTS products (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(150),
            sku VARCHAR(100) NULL,
            price DECIMAL(10,2)
          );

          CREATE TABLE IF NOT EXISTS orders (
            id INT AUTO_INCREMENT PRIMARY KEY,
            user_id INT NOT NULL,
            total_amount DECIMAL(10,2) NOT NULL
          );

          CREATE TABLE IF NOT EXISTS order_items (
            id INT AUTO_INCREMENT PRIMARY KEY,
            order_id INT NOT NULL,
            product_id INT NOT NULL,
            quantity DECIMAL(10,2) NOT NULL,
            unit_price DECIMAL(10,2) NOT NULL
          );

          INSERT INTO users (id,name,email) VALUES (1,'Ada Lovelace','ada@example.com')
          ON DUPLICATE KEY UPDATE name=VALUES(name), email=VALUES(email);

          INSERT INTO products (id,name,sku,price) VALUES
            (1,'Widget','SKU-1',9.99),
            (2,'Gadget','SKU-2',15.50)
          ON DUPLICATE KEY UPDATE name=VALUES(name), sku=VALUES(sku), price=VALUES(price);

          INSERT INTO orders (id,user_id,total_amount) VALUES (1,1,99.99)
          ON DUPLICATE KEY UPDATE total_amount=VALUES(total_amount);

          INSERT INTO order_items (order_id,product_id,quantity,unit_price)
          VALUES (1,1,2,9.99), (1,2,1,15.50);
          SQL

      - name: Tests
        working-directory: src
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: "3306"
          DB_NAME: labo02_db
          DB_USER: labo02
          DB_PASS: labo02
          DB_PASSWORD: labo02
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: "6379"
          REDIS_DB: "0"
        run: python -m pytest -q

  deploy:
    runs-on: self-hosted
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          clean: true

      - name: DÃ©ploiement Docker
        working-directory: .
        run: docker compose up -d --build --remove-orphans
